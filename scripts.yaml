fire_scene_creator_event:
  alias: Fire Scene Creator Event
  variables:
    event_name: 'TEST_EVENT'
    scene_group_prefix: 'group'
    scene_name: 'Test Scene'
    light_group: 'light.test_light_group'
    light_intensity_control: ''
    timebased_scene_config: ''
  sequence:
    - event: SCENE_CREATOR
      event_data:
        event_name: "{{ event_name }}"
        scene_group_prefix: "{{ scene_group_prefix }}"
        scene_name: "{{ scene_name }}"
        light_group: "{{ light_group }}"
        light_intensity_control: "{{ light_intensity_control }}"
        timebased_scene_config: "{{ timebased_scene_config }}"

let_light_blink:
  alias: Let ceiling light in kitchen blink
  mode: restart
  variables:
    blink_timeout: 1
    light_entity_id: 'light.kitchen_ceiling_light'
    observed_input_boolean: 'input_boolean.fride_door_was_left_open'
  sequence:
    repeat:
      while:
        - condition: template
          value_template: "{{ is_state(observed_input_boolean, 'on') }}"
      sequence:
        - service: light.turn_on
          data_template:
            entity_id: "{{ light_entity_id }}"
        - delay: "{{ blink_timeout }}"
        - service: light.turn_off
          data_template:
            entity_id: "{{ light_entity_id }}"
        - delay: "{{ blink_timeout }}"

zigbee2mqtt_rename:
  alias: Zigbee2MQTT Rename
  sequence:
    service: mqtt.publish
    data_template:
      topic: zigbee2mqtt/bridge/request/device/rename
      payload_template: >-
          {
            "from": "{{ states.input_text.zigbee2mqtt_old_name.state | string }}",
            "to": "{{ states.input_text.zigbee2mqtt_new_name.state | string }}"
          }

zigbee2mqtt_update:
  alias: Zigbee2MQTT Update
  sequence:
    service: mqtt.publish
    data_template:
      topic: zigbee2mqtt/bridge/request/device/ota_update/update
      payload_template: >-
        {{ states.input_text.zigbee2mqtt_update_name.state | string }}

zigbee2mqtt_remove:
  alias: Zigbee2MQTT Remove
  sequence:
    service: mqtt.publish
    data_template:
      topic: zigbee2mqtt/bridge/request/device/remove
      payload_template: >-
          { 
            "id": "{{ states.input_text.zigbee2mqtt_remove.state | string }}", 
            "force": {% if states.input_boolean.zigbee2mqtt_force_remove.state == "off" %}false{% else %}true{% endif %}
          }
