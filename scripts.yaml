fire_scene_creator_event:
  alias: Fire Scene Creator Event
  variables:
    event_name: 'TEST_EVENT'
    scene_group_prefix: 'group'
    scene_name: 'Test Scene'
    light_group: 'light.test_light_group'
    light_intensity_control: ''
    timebased_scene_config: ''
  sequence:
    - event: SCENE_CREATOR
      event_data:
        event_name: "{{ event_name }}"
        scene_group_prefix: "{{ scene_group_prefix }}"
        scene_name: "{{ scene_name }}"
        light_group: "{{ light_group }}"
        light_intensity_control: "{{ light_intensity_control }}"
        timebased_scene_config: "{{ timebased_scene_config }}"

toggle_scene_from_input_select:
  alias: Toggle scene from input select
  variables:
    input_select_entity: 'input_select.bedroom_light_scene'
  sequence:
    - service: scene.turn_on
      data_template:
        entity_id: "{{ 'scene.bedroom_' + states(input_select_entity) | string | lower | regex_replace(find=' ', replace='_', ignorecase=False) }}"

let_light_blink:
  alias: Let ceiling light in kitchen blink
  mode: restart
  variables:
    blink_timeout: 1
    light_entity_id: 'light.kitchen_ceiling_light'
    observed_input_boolean: 'input_boolean.fride_door_was_left_open'
  sequence:
    repeat:
      while:
        - condition: template
          value_template: "{{ is_state(observed_input_boolean, 'on') }}"
      sequence:
        - service: light.turn_on
          data_template:
            entity_id: "{{ light_entity_id }}"
        - delay: "{{ blink_timeout }}"
        - service: light.turn_off
          data_template:
            entity_id: "{{ light_entity_id }}"
        - delay: "{{ blink_timeout }}"

create_light_scene_from_group:
  alias: Create Scene From Lights in Group
  variables:
    group_name: 'group.all_bedroom_lights'
    scene_name_input_text: 'input_text.bedroom_generated_scene_name'
    scene_prefix: 'Bedroom'
    timebased_scene_input_select: 'input_select.bedroom_time_based_scenes'
  sequence:
    - service: system_log.write
      data_template:
        message: 'Creating scene: {{ "scene." + scene_prefix | string | lower | replace(" ", "_") + "_" + states(scene_name_input_text) | lower | replace(" ", "_") }}'
        level: info
    - choose:
      - conditions:
        - condition: template
          value_template: >
            {{ states["scene." + scene_prefix | string | lower | replace(" ", "_") + "_" +  states(scene_name_input_text) | lower | replace(" ", "_")] == None }}
        - condition: template
          value_template: >
            {{ states[scene_name_input_text].state | string | length > 0}}
        sequence:
        - service: shell_command.truncate_file
          data_template:
            file_path: >
              'input/input_select/{{ scene_prefix | string | lower | replace(" ", "_") }}_generated.yaml'
        - service: shell_command.write_variable_content_to_file
          data_template:
            target_file: >
              'input/input_select/{{ scene_prefix | string | lower | replace(" ", "_") }}_generated.yaml'
            content: >
              {% set new_options = (states['input_select.' + scene_prefix | string | lower | replace(" ", "_") + '_light_scene_generated'].attributes.options | sort | join (",")) | string + "," + states(scene_name_input_text) %}
              {% set input_select_output %}
              {{ scene_prefix | string | lower | replace(" ", "_") }}_light_scene_generated:
                options:{% for option in (new_options.split(",") | sort) %}
                  - {{ option }}{% endfor %}

              {{ scene_prefix | string | lower | replace(" ", "_") }}_automatic_light_scene_generated:
                options:{% for option in (new_options.split(",") | sort) %}
                  - {{ option }}{% endfor %}

              {% for date_time_scene_tuple in states[timebased_scene_input_select].attributes.options %}{{ date_time_scene_tuple.split('/')[0].replace("_start_time", "") + "_choosen_scene"}}:
                options:{% for option in (new_options.split(",") | sort) %}
                  - {{ option }}{% endfor %}

              {% endfor %}              
              {% endset %}
              {{ input_select_output }}
        - service: shell_command.write_variable_content_to_file
          data_template:
            target_file: >
              '{{ scene_prefix | string | lower | replace(" ", "_") }}/scenes.yaml'
            content: >
              {% set sceneoutput %}

              - name: {{ scene_prefix }} {{ states(scene_name_input_text) }}
                entities:{% for light in expand(group_name) %}
                  {{ light.entity_id }}:{% if light.attributes.brightness %}
                    brightness: {{ light.attributes.brightness }}{% endif %}{% if light.attributes.hs_color %}
                    hs_color:
                      - {{ light.attributes.hs_color[0] }}
                      - {{ light.attributes.hs_color[1] }}{% endif %}{% if light.attributes.rgb_color %}
                    rgb_color:
                      - {{ light.attributes.rgb_color[0] }}
                      - {{ light.attributes.rgb_color[1] }}
                      - {{ light.attributes.rgb_color[2] }}{% endif %}{% if light.attributes.xy_color %}
                    xy_color:
                      - {{ light.attributes.xy_color[0] }}
                      - {{ light.attributes.xy_color[1] }}{% endif %}{% if light.attributes.color_temp %}
                    color_temp: {{ light.attributes.color_temp }}{% endif %}
                    state: \"{{ light.state }}\"{% endfor %}
              {% endset %}
              {{ sceneoutput }}
        - service: scene.reload
        - service: input_select.reload
        - service: persistent_notification.create
          data:
            message: "Scene '{{ states(scene_name_input_text) }}'' successfully created"
            title: "Scene created for {{ scene_prefix }}"
        - service: input_text.set_value
          data_template:
            entity_id: "{{ scene_name_input_text }}"
            value: ''
      default:
        - service: persistent_notification.create
          data:
            message: "Either scene already exists or no scene name was given!"
            title: "Scene creation failed"        